{"version":3,"sources":["LottoBall.js","Lotto.js","App.js","serviceWorker.js","index.js"],"names":["DEFAULT_CLASS","ANIMATION_CLASSES","LottoBall","state","classes","join","pendingAnimation","this","timer","clearTimeout","prevProps","prevState","_this2","prevVal","value","currentVal","props","delay","length","JSON","stringify","setState","setTimeout","_this$props","styles","twoDigits","push","react_default","a","createElement","className","map","item","i","key","Component","FALSE_NUM_SIZE","LottoGameBoard","values","Array","from","_this","numBalls","v","bonusValues","generatingResults","createNumber","min","max","Math","floor","random","generate","minimum","maximum","noRepeat","sort","accumulator","prevValues","getNumber","num","includes","numbers","myNum","b","n","concat","Object","toConsumableArray","bonusBall","_this$props2","bonusMinimum","bonusMaximum","bonusNum","_this$props3","gameTitle","index","src_LottoBall_0","bonusBallClassname","onClick","disabled","defaultProps","App","Lotto","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.322d131b.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './LottoBall.css';\n\nconst DEFAULT_CLASS = ['numberList'];\nconst ANIMATION_CLASSES = ['animating', 'blurring'];\n\nclass LottoBall extends Component {\n\n    state = {\n        classes: DEFAULT_CLASS.join(' '),\n        pendingAnimation: false,\n    }\n\n    componentDidMount() {\n        this.timer = null;\n    }\n\n    componentWillUnmount() {\n        clearTimeout(this.timer);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n\n        const { value: prevVal } = prevProps;\n        const { value: currentVal } = this.props;\n        const { delay } = this.props;\n\n        // if props have changed - reset the view to starting point of the animation classes/styles\n        if (prevVal.length !== currentVal.length || (JSON.stringify(prevVal) !== JSON.stringify(currentVal))) {\n            this.setState(({ classes: DEFAULT_CLASS.join(' '), pendingAnimation: true }));\n        }\n\n        if (this.state.pendingAnimation) {\n            this.timer = setTimeout(() => {\n                this.setState(state => {\n                    return ({\n                        classes: ANIMATION_CLASSES.join(' '),\n                        pendingAnimation: false\n                    })\n                })\n            }, delay);\n        }\n    }\n\n    render() {\n        const {\n            styles,\n            twoDigits,\n            value\n        } = this.props;\n\n        const classes = ['lottoBall'];\n        classes.push(styles);\n\n        return (\n            <div className=\"lottoBallContainer\">\n                <div className={classes.join(' ')}>\n                    <div className=\"lottoLabel\">\n                        <ul className={this.state.classes}>\n                            {\n                                value.map((item, i) => {\n                                    return <li key={i}>{twoDigits && item < 10 && item !== '?' ? \"0\" + item : item}</li>\n                                })\n                            }\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n};\n\nexport default LottoBall;","import React, { Component } from 'react';\nimport LottoBall from './LottoBall';\nimport './LottoGameBoard.css';\n\nconst FALSE_NUM_SIZE = 5;\n\nclass LottoGameBoard extends Component {\n\n    static defaultProps = {\n        gameTitle: 'Untitled Game',\n        numBalls: 4,\n        minimum: 0,\n        maximum: 9,\n        bonusBall: false,\n        noRepeat: false,\n        sort: false,\n        twoDigits: false\n    };\n\n    // [values] defaults to an array of arrays matching the length of props.numBalls \n    //          with one element inside each array: '?'\n    state = {\n        values: Array.from({ length: this.props.numBalls }, (v, i) => ['?']),\n        bonusValues: ['?'],\n        generatingResults: false\n    };\n\n    createNumber = (min, max) => {\n        return Math.floor(Math.random() * max) + min;\n    };\n\n    generate = () => {\n        const { \n            minimum,\n            maximum,\n            noRepeat,\n            sort,\n        } = this.props;\n\n        // [accumulator] will hold the 'selected' random numbers we show in the UI\n        // [prevValues] will hold the previously shown random number and hold it for next 'generate' animation\n        let accumulator = [];\n        let prevValues = [];\n        let bonusValues = ['?'];\n\n        // [getNumber] recursive random number generator - checks for repeats and returns the value\n        const getNumber = (min, max) => {\n            const num = this.createNumber(min, max);\n            if (noRepeat && accumulator.includes(num)) {\n                return getNumber(min, max);\n            }\n            return num;\n        };\n\n        // generate the sequence of randomly generated numbers\n        // stored as an array of single element arrays matching the length of values.length\n        const numbers = this.state.values.map((v, i) => {\n            // [prevValues] stores the last shown randomly generated lottery number - which is at the end of the array\n            prevValues.push(v[v.length-1]);\n            const myNum = getNumber(minimum, maximum);\n            accumulator.push(myNum);\n            return [ myNum ];\n        });\n\n        if (sort) numbers.sort((a, b) => a[0] - b[0]);\n\n        // generate the 'fake' numbers to scroll/animate prior to showing the real randomly selected number\n        for (let a = 0; a < numbers.length; a ++) {\n            accumulator = [];\n            accumulator.push(prevValues[a]);\n            for (let n = 0; n < FALSE_NUM_SIZE; n++) {\n                const myNum = getNumber(minimum, maximum);\n                accumulator.push(myNum);\n            }\n            // add the 'fake' numbers in the front of the array and place the real random number at the last position\n            numbers[a] = [ ...accumulator, numbers[a][0] ];\n        }\n\n        // generate the bonusBall value if needed\n        if (this.props.bonusBall) {\n            const {\n                bonusMinimum,\n                bonusMaximum\n            } = this.props;\n\n            const prevValues = [ ...this.state.bonusValues ];\n            accumulator = [];\n            \n            for (let b = 0; b < FALSE_NUM_SIZE; b++) {\n                const bonusNum = getNumber(bonusMinimum, bonusMaximum);\n                accumulator.push(bonusNum);\n            }\n            bonusValues = [ prevValues[prevValues.length - 1], ...accumulator, getNumber(bonusMinimum, bonusMaximum) ];\n        }\n\n        this.setState(state => {\n            return {\n                bonusValues,\n                values: numbers,\n                generatingResults: true\n            }\n        });\n\n        setTimeout(() => {\n            this.setState({ generatingResults: false });\n        }, this.state.values.length * 210);\n    };\n\n    render() {\n        const { \n            gameTitle, \n            bonusBall, \n            twoDigits \n        } = this.props;\n        \n        let index = -1;\n\n        return (\n            <div className=\"lottoGame\">\n                <div>\n                    <h2>{gameTitle}</h2>\n                    { \n                        this.state.values.map(item => {\n                            index += 1;\n                            return <LottoBall \n                                        key={index} \n                                        delay={index * 133} \n                                        twoDigits={twoDigits}\n                                        value={item} \n                                    />\n                        })\n                    }\n                    {\n                        bonusBall ? \n                            <LottoBall \n                                key={index + 1} \n                                styles={this.props.bonusBallClassname}\n                                delay={(index + 1) * 133} \n                                twoDigits={twoDigits}\n                                value={this.state.bonusValues} \n                            /> : null\n                    }\n                </div>\n                <div>\n                    <button className=\"generateBtn\" onClick={this.generate} disabled={this.state.generatingResults}>Generate Numbers</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default LottoGameBoard;","import React from 'react';\nimport Lotto from './Lotto';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Lotto \n        gameTitle=\"Mega Millions\"\n        numBalls={5}\n        minimum={1}\n        maximum={70}\n        bonusBall\n        bonusMinimum={1}\n        bonusMaximum={25}\n        bonusBallClassname=\"megaBall\"\n        noRepeat\n        sort\n        twoDigits\n      />\n      <Lotto \n        gameTitle=\"Power Ball\"\n        numBalls={5}\n        minimum={1}\n        maximum={69}\n        bonusBall\n        bonusMinimum={1}\n        bonusMaximum={26}\n        bonusBallClassname=\"powerBall\"\n        noRepeat\n        sort\n        twoDigits\n      />\n      <Lotto \n        gameTitle=\"Pick 6\" \n        numBalls={6} \n        minimum={1} \n        maximum={49} \n        noRepeat\n        sort \n        twoDigits\n      />\n      <Lotto \n        gameTitle=\"Cash 5\" \n        numBalls={5} \n        minimum={1} \n        maximum={43} \n        noRepeat\n        sort \n        twoDigits\n      />\n      <Lotto \n        gameTitle=\"Pick 4\" \n        numBalls={4} \n        minimum={0} \n        maximum={9} \n      />\n      <Lotto \n        gameTitle=\"Pick 3\" \n        numBalls={3} \n        minimum={0} \n        maximum={9} \n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}